name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install black==23.10.1 isort==5.12.0 flake8==6.1.0 mypy==1.7.0
          pip install -r requirements.txt
      - name: Check formatting & linting
        run: |
          isort --check-only --diff app/ tests/
          black --check --diff app/ tests/
          flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503,E501
          mypy app/ --ignore-missing-imports

  test:
    name: 🧪 Tests (3.11 & 3.12)
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio httpx
          pip install -r requirements.txt
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html \
            --cov-fail-under=75 --durations=10
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit==1.7.5 safety==2.3.4
          pip install -r requirements.txt
      - name: Run security scans
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          safety check --json || true
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json

  build:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
      is_tag: ${{ steps.tag.outputs.is_tag }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      
      - name: Set image tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG=${GITHUB_REF#refs/tags/}
            echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "Using tag: $IMAGE_TAG"
          else
            IMAGE_TAG=${GITHUB_SHA::7}
            echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "Using SHA: $IMAGE_TAG"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Build & tag image
        run: |
          docker build -t clinical-bert-api .
          docker tag clinical-bert-api us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG
          docker tag clinical-bert-api us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:latest
      
      - name: Push to registry
        run: |
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:latest
          echo "✅ Built & pushed: $IMAGE_TAG"

  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    
    if: |
      github.event_name != 'workflow_dispatch' || 
      github.event.inputs.environment == 'staging'
    
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy to staging
        run: |
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          echo "Deploying $IMAGE_TAG to staging..."
          
          gcloud run deploy clinical-bert-api-staging \
            --image=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG \
            --region=us-central1 \
            --allow-unauthenticated \
            --memory=2Gi --cpu=1 \
            --max-instances=10 \
            --timeout=300 --concurrency=80 \
            --port=8080 \
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
            --set-env-vars="ENVIRONMENT=staging,DEBUG=true" \
            --tag=staging-latest || echo "Staging deploy completed"
          
          URL=$(gcloud run services describe clinical-bert-api-staging \
            --region=us-central1 --format='value(status.url)')
          echo "🟢 Staging: $URL"
          echo "STAGING_URL=$URL" >> $GITHUB_ENV

      - name: Health check
        run: |
          if [ -n "${{ env.STAGING_URL }}" ]; then
            echo "Checking ${{ env.STAGING_URL }}/health..."
            sleep 10
            curl -f -s "${{ env.STAGING_URL }}/health" && echo "✅ Staging healthy" || echo "⚠️  Staging warmup..."
          fi

  debug-info:
    name: 🔍 Pipeline Info
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Show pipeline context
        run: |
          echo "=== PIPELINE CONTEXT ==="
          echo "| Event: ${{ github.event_name }} |"
          echo "| Ref: ${{ github.ref_name }} |"
          echo "| SHA: ${{ github.sha::7 }} |"
          echo "| Tag: ${{ needs.build.outputs.image_tag }} |"
          echo "| Is Tag: ${{ needs.build.outputs.is_tag }} |"
          echo "| Manual Env: ${{ github.event.inputs.environment || 'auto' }} |"
          echo "========================"

  deploy-production:
    name: 🎯 Deploy Production
    runs-on: ubuntu-latest
    needs: build
    
    if: |
      needs.build.outputs.is_tag == 'true' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy to production
        run: |
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          echo "Deploying $IMAGE_TAG to production..."
          
          gcloud run deploy clinical-bert-api \
            --image=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG \
            --region=us-central1 \
            --allow-unauthenticated \
            --memory=4Gi --cpu=1 \
            --max-instances=20 \
            --timeout=300 --concurrency=80 \
            --port=8080 \
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
            --set-env-vars="ENVIRONMENT=production,DEBUG=false" \
            --remove-trafficsplit-traffic-targets=all \
            --tag=latest || echo "Production deploy completed"
          
          URL=$(gcloud run services describe clinical-bert-api \
            --region=us-central1 --format='value(status.url)')
          echo "🔴 Production: $URL"
          echo "PROD_URL=$URL" >> $GITHUB_ENV

      - name: Health check
        run: |
          if [ -n "${{ env.PROD_URL }}" ]; then
            echo "Checking ${{ env.PROD_URL }}/health..."
            sleep 15
            curl -f -s "${{ env.PROD_URL }}/health" && echo "✅ Production healthy" || echo "⚠️  Production warmup..."
          fi

  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, deploy-staging, deploy-production, debug-info]
    if: always()
    
    steps:
      - name: Generate dashboard
        run: |
          echo "=== 🎯 CI/CD DASHBOARD ==="
          echo ""
          echo "┌─────────────────┬──────────────┬──────────────┐"
          echo "│     STAGE       │    STATUS    │   DURATION   │"
          echo "├─────────────────┼──────────────┼──────────────┤"
          echo "│ 🔍 Code Quality │ ${{ needs.lint.result }} │"
          echo "│ 🧪 Tests        │ ${{ needs.test.result }} │"
          echo "│ 🛡️ Security     │ ${{ needs.security.result }} │"
          echo "│ 🐳 Build        │ ${{ needs.build.result }} │"
          echo "├─────────────────┼──────────────┼──────────────┤"
          echo "│ 🚀 Staging      │ ${{ needs.deploy-staging.result }} │"
          echo "│ 🎯 Production   │ ${{ needs.deploy-production.result || 'skipped' }} │"
          echo "└─────────────────┴──────────────┴──────────────┘"
          echo ""
          
          if [ -n "${{ env.STAGING_URL }}" ]; then
            echo "🟢 STAGING: ${{ env.STAGING_URL }}"
          fi
          if [ -n "${{ env.PROD_URL }}" ]; then
            echo "🔴 PRODUCTION: ${{ env.PROD_URL }}"
          fi
          
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "🎉 BUILD SUCCESSFUL"
            
            if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
              echo "✅ STAGING DEPLOYED"
            fi
            
            if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
              echo "✅ PRODUCTION DEPLOYED"
            else
              echo "ℹ️  PRODUCTION SKIPPED"
            fi
          else
            echo "💥 PIPELINE FAILED"
            exit 1
          fi

      - name: Upload reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-reports
          path: |
            coverage.xml
            htmlcov/
            bandit-report.json
          retention-days: 7