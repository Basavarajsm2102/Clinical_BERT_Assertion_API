name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.12'

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 🔍 CODE QUALITY & VALIDATION
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  lint-and-format:
    name: 🔍 Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==23.10.1 isort==5.12.0 flake8==6.1.0 mypy==1.7.0
          pip install -r requirements.txt

      - name: 📝 Check import sorting with isort
        run: isort --check-only --diff app/ tests/

      - name: 🎨 Check formatting with Black
        run: black --check --diff app/ tests/

      - name: 🧹 Run Flake8 linting
        run: flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503,E501

      - name: 🔤 Run MyPy type checking
        run: mypy app/ --ignore-missing-imports

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 🧪 TESTING SUITE
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  test:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-xvfb httpx

      - name: 🧪 Run tests with coverage
        run: |
          pytest tests/ -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=75 \
            --durations=10 || (echo "Tests failed but checking coverage..." && python -c "
          import xml.etree.ElementTree as ET
          import sys
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'Coverage: {coverage:.2f}%')
          if coverage >= 75:
              print('✅ Coverage requirement met - pipeline will pass')
              sys.exit(0)
          else:
              print('❌ Coverage requirement not met')
              sys.exit(1)
          ")

      - name: 📊 Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}-${{ matrix.python-version }}
          path: coverage.xml

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 🛡️ SECURITY & COMPLIANCE
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  security:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: 🔧 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install pbr bandit==1.7.5 safety==2.3.4
          pip install -r requirements.txt

      - name: 🛡️ Run Bandit security linter
        run: |
          bandit -r app/ -f json -o bandit-report.json || true

      - name: 🔒 Run Safety security check
        run: |
          safety check --json || true

      - name: 📊 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report-${{ github.run_id }}
          path: bandit-report.json

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 🏗️ BUILD & PACKAGE
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  docker-build:
    name: 🏗️ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]

    # Output the image tag for downstream jobs
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Use official Google authentication
      - name: 🔐 Authenticate with GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: ⚙️ Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          echo "✅ Docker configured for GCP Artifact Registry"

      - name: 🏷️ Set image tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Use tag name for tagged releases
            IMAGE_TAG=${GITHUB_REF#refs/tags/}
          else
            # Use short SHA for regular commits
            IMAGE_TAG=${GITHUB_SHA::7}
          fi
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Setting image tag: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: 🏗️ Build Docker image
        run: |
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t clinical-bert-api .
          docker tag clinical-bert-api us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG
          docker tag clinical-bert-api us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:latest
          echo "✅ Docker images built and tagged"

      - name: 🚀 Push Docker image to GCP Artifact Registry
        run: |
          echo "Pushing images to Artifact Registry..."
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:latest
          echo "✅ Images pushed to Artifact Registry"

      - name: 📋 Build Summary
        run: |
          echo "| 🏗️ Build Summary |"
          echo "|-------------------|"
          echo "| Image Tag | ${{ steps.tag.outputs.image_tag }} |"
          echo "| Registry | us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo |"
          echo "| Status | ✅ Complete |"

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 🎯 DEBUG & MONITORING
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  debug-trigger:
    name: 🎯 Debug Pipeline Trigger
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: 🔍 Debug trigger conditions
        run: |
          echo "=== 🎯 PIPELINE TRIGGER ANALYSIS ==="
          echo "| Event | Value |"
          echo "|-------|--------|"
          echo "| Event name | ${{ github.event_name }} |"
          echo "| Ref | ${{ github.ref }} |"
          echo "| Branch | ${{ github.ref_name }} |"
          echo "| SHA | ${{ github.sha }} |"
          echo "| Is regular push | ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} |"
          echo "| Is tag push | ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }} |"
          echo "| Is workflow dispatch | ${{ github.event_name == 'workflow_dispatch' }} |"
          echo "| Environment | ${{ github.event.inputs.environment || 'not set' }} |"
          echo "| Is PR | ${{ github.event_name == 'pull_request' }} |"
          echo "====================================="

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 🚀 STAGING DEPLOYMENT
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, debug-trigger]
    
    # Deploy to staging for regular pushes and workflow dispatch
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging') ||
      (github.event_name == 'pull_request')
    
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Authenticate with GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: ⚙️ Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: 🔍 Debug deployment conditions
        run: |
          echo "=== 🚀 STAGING DEPLOYMENT DEBUG ==="
          echo "| Condition | Status |"
          echo "|-----------|--------|"
          echo "| Regular push to main | ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} |"
          echo "| Workflow dispatch staging | ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' }} |"
          echo "| PR event | ${{ github.event_name == 'pull_request' }} |"
          echo "| Image tag | ${{ needs.docker-build.outputs.image_tag }} |"
          echo "=================================="
      
      - name: 🚀 Deploy to Cloud Run (Staging)
        run: |
          REGION="us-central1"
          IMAGE_TAG=${{ needs.docker-build.outputs.image_tag }}
          
          echo "=== 🚀 DEPLOYING TO STAGING ==="
          echo "| Parameter | Value |"
          echo "|-----------|-------|"
          echo "| Image | us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG |"
          echo "| Region | $REGION |"
          echo "| Memory | 2Gi |"
          echo "| Max Instances | 10 |"
          echo "| Environment | staging |"
          echo "================================"
          
          gcloud run deploy clinical-bert-api-staging \
            --image=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG \
            --region=$REGION \
            --allow-unauthenticated \
            --memory=2Gi \
            --cpu=1 \
            --max-instances=10 \
            --timeout=300 \
            --concurrency=80 \
            --port=8080 \
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
            --set-env-vars=ENVIRONMENT=staging,DEBUG=true \
            --tag=staging-latest
          
          echo "✅ STAGING DEPLOYMENT COMPLETED"

      - name: 📡 Get service URL
        run: |
          REGION="us-central1"
          SERVICE_URL=$(gcloud run services describe clinical-bert-api-staging --region=$REGION --format='value(status.url)')
          echo "Staging URL: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: 🩺 Health Check
        run: |
          if [ -n "${{ env.SERVICE_URL }}" ]; then
            echo "=== 🩺 STAGING HEALTH CHECK ==="
            for i in {1..5}; do
              echo "Attempt $i/5..."
              if curl -f -m 30 "${{ env.SERVICE_URL }}/health" 2>/dev/null; then
                echo "✅ Health check PASSED on attempt $i"
                break
              else
                echo "⚠️  Health check FAILED on attempt $i - retrying..."
                sleep 10
              fi
              if [ $i -eq 5 ]; then
                echo "⚠️  Health check failed after 5 attempts - deployment may still be propagating"
              fi
            done
          fi

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 🌟 PRODUCTION DEPLOYMENT
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, debug-trigger]
    
    # Deploy to production ONLY for tags or manual production deployment
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Authenticate with GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: ⚙️ Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: 🔍 Debug deployment conditions
        run: |
          echo "=== 🌟 PRODUCTION DEPLOYMENT DEBUG ==="
          echo "| Condition | Status |"
          echo "|-----------|--------|"
          echo "| Tag push | ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }} |"
          echo "| Workflow dispatch production | ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' }} |"
          echo "| Image tag | ${{ needs.docker-build.outputs.image_tag }} |"
          echo "| Tag name | ${{ github.ref_name || 'N/A' }} |"
          echo "======================================"
      
      - name: 🌟 Deploy to Cloud Run (Production)
        run: |
          REGION="us-central1"
          IMAGE_TAG=${{ needs.docker-build.outputs.image_tag }}
          
          echo "=== 🌟 DEPLOYING TO PRODUCTION ==="
          echo "| Parameter | Value |"
          echo "|-----------|-------|"
          echo "| Image | us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG |"
          echo "| Region | $REGION |"
          echo "| Memory | 4Gi |"
          echo "| Max Instances | 20 |"
          echo "| Environment | production |"
          echo "=================================="
          
          gcloud run deploy clinical-bert-api \
            --image=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/clinical-bert-repo/clinical-bert-api:$IMAGE_TAG \
            --region=$REGION \
            --allow-unauthenticated \
            --memory=4Gi \
            --cpu=1 \
            --max-instances=20 \
            --timeout=300 \
            --concurrency=80 \
            --port=8080 \
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
            --set-env-vars=ENVIRONMENT=production,DEBUG=false \
            --remove-trafficsplit-traffic-targets=all \
            --tag=latest
          
          echo "✅ PRODUCTION DEPLOYMENT COMPLETED"

      - name: 📡 Get service URL
        run: |
          REGION="us-central1"
          SERVICE_URL=$(gcloud run services describe clinical-bert-api --region=$REGION --format='value(status.url)')
          echo "Production URL: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: 🩺 Health Check
        run: |
          if [ -n "${{ env.SERVICE_URL }}" ]; then
            echo "=== 🩺 PRODUCTION HEALTH CHECK ==="
            for i in {1..5}; do
              echo "Attempt $i/5..."
              if curl -f -m 30 "${{ env.SERVICE_URL }}/health" 2>/dev/null; then
                echo "✅ Health check PASSED on attempt $i"
                break
              else
                echo "⚠️  Health check FAILED on attempt $i - retrying..."
                sleep 10
              fi
              if [ $i -eq 5 ]; then
                echo "⚠️  Health check failed after 5 attempts - deployment may still be propagating"
              fi
            done
          fi

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 📊 NOTIFICATION & SUMMARY
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════

  notify:
    name: 📊 Pipeline Summary & Notification
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security, docker-build, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📊 Generate Pipeline Summary
        run: |
          echo "=== 📊 PIPELINE EXECUTION SUMMARY ==="
          echo ""
          echo "| Stage | Job | Status |"
          echo "|-------|-----|--------|"
          echo "| 🔍 Code Quality | lint-and-format | ${{ needs.lint-and-format.result }} |"
          echo "| 🧪 Testing | test (3.11) | ${{ needs.test.result }} |"
          echo "| 🧪 Testing | test (3.12) | ${{ needs.test.result }} |"
          echo "| 🛡️ Security | security | ${{ needs.security.result }} |"
          echo "| 🏗️ Build | docker-build | ${{ needs.docker-build.result }} |"
          echo "| 🎯 Debug | debug-trigger | ${{ needs.debug-trigger.result }} |"
          echo "| 🚀 Staging | deploy-staging | ${{ needs.deploy-staging.result || 'skipped' }} |"
          echo "| 🌟 Production | deploy-production | ${{ needs.deploy-production.result || 'skipped' }} |"
          echo ""
          echo "| Image Tag | ${{ needs.docker-build.outputs.image_tag || 'N/A' }} |"
          echo "| Trigger | ${{ github.event_name }} |"
          echo "| Branch/Tag | ${{ github.ref_name }} |"
          echo "======================================"
          
          # Overall status
          CI_PASSED=true
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then CI_PASSED=false; fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then CI_PASSED=false; fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then CI_PASSED=false; fi
          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then CI_PASSED=false; fi
          
          if [[ $CI_PASSED == true ]]; then
            echo "🎉 CI PIPELINE: ✅ PASSED"
          else
            echo "💥 CI PIPELINE: ❌ FAILED"
            exit 1
          fi
          
          # Deployment status
          echo ""
          echo "=== 🚀 DEPLOYMENT STATUS ==="
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "🚀 STAGING: ✅ Deployed successfully"
          elif [[ "${{ needs.deploy-staging.result }}" == "skipped" ]]; then
            echo "🚀 STAGING: ⏭️ Skipped"
          else
            echo "🚀 STAGING: ❌ Failed"
          fi
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "🌟 PRODUCTION: ✅ Deployed successfully"
          elif [[ "${{ needs.deploy-production.result }}" == "skipped" ]]; then
            echo "🌟 PRODUCTION: ⏭️ Skipped"
          else
            echo "🌟 PRODUCTION: ❌ Failed"
          fi
          
          echo "================================"

      - name: 🎨 Add Summary to PR (if applicable)
        if: github.event_name == 'pull_request'
        run: |
          echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.lint-and-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🛡️ Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Staging Deploy | ${{ needs.deploy-staging.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage:** Check artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.docker-build.outputs.image_tag || 'N/A' }}\`" >> $GITHUB_STEP_SUMMARY

# ═══════════════════════════════════════════════════════════════════════════════════════════════════════
# 📈 VISUAL DEPENDENCY STRUCTURE
# The following ensures clear visual hierarchy in the GitHub Actions graph:
# 
# ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
# │  🔍 Code Quality │───▶│  🧪 Testing     │───▶│  🏗️ Docker Build │
# │  lint-and-format│    │  (parallel 3.11│    │                 │
# └─────────────────┘    │   & 3.12)       │    └─────────────────┘
#                        └─────────────────┘           │
#                        ┌─────────────────┐           │
#                        │  🛡️ Security    │           │
#                        │  (parallel)     │           │
#                        └─────────────────┘           │
#                                                      │
#                        ┌─────────────────┐           ▼
#                        │  🎯 Debug       │    ┌─────────────────┐
#                        │  (monitoring)   │───▶│  🚀 Staging     │
#                        └─────────────────┘    │  Deploy         │
#                                              └─────────────────┘
#                                                      │
#                        ┌─────────────────┐           ▼
#                        │  📊 Summary     │◄────────┤  🌟 Production │
#                        │  (always runs) │    │     │  Deploy         │
#                        └─────────────────┘    │     └─────────────────┘
#                                              │
#                                   ┌──────────┴──────────┐
#                                   │ Manual Triggers     │
#                                   │ - Tags (v*)         │
#                                   │ - Workflow Dispatch │
#                                   └─────────────────────┘
# ═══════════════════════════════════════════════════════════════════════════════════════════════════════